'use client'

import { useState, useEffect, useRef } from 'react'
import { useRouter } from 'next/navigation'
import { Plus, Edit, Trash2, Settings, Upload, Save, X } from 'lucide-react'
import { getAllAIRoles, deleteAIRole } from '@/lib/database-setup'
import { type AIRole } from '@/types/ai-roles'
import Image from 'next/image'
import AvatarUpload from '@/components/ui/AvatarUpload'
import ApiConfig from '@/components/ui/ApiConfig'
import { fetchJsonWithRetry, getNetworkErrorMessage, isOnline, onNetworkChange } from '@/lib/network-utils'
import { useAuth } from '@/contexts/AuthContext'
import { DEMO_MODE } from '@/lib/supabase'

const TABS = [
  { key: 'basic', label: 'Âü∫Êú¨‰ø°ÊÅØ' },
  { key: 'avatar', label: 'Â§¥ÂÉèËÆæÁΩÆ' },
  { key: 'api', label: 'APIÈÖçÁΩÆ' }
] as const

export default function RoleManagement() {
  const router = useRouter()
  const { user } = useAuth()
  const [roles, setRoles] = useState<AIRole[]>([])
  const [loading, setLoading] = useState(true)
  const [editingRole, setEditingRole] = useState<AIRole | null>(null)
  const [showCreateForm, setShowCreateForm] = useState(false)
  const [activeTab, setActiveTab] = useState<'basic' | 'avatar' | 'api'>('basic')
  const [connStatus, setConnStatus] = useState<Record<string, {status:'idle'|'testing'|'success'|'error', latency?: number}>>({})
  const [saveState, setSaveState] = useState<{status: 'idle' | 'saving' | 'success' | 'error', message?: string}>({status: 'idle'})
  const [networkStatus, setNetworkStatus] = useState<boolean>(true)
  const [formData, setFormData] = useState<Partial<AIRole>>({
    name: '',
    description: '',
    avatar_url: '',
    personality: '',
    specialties: [],
    learning_progress: {
      level: 1,
      experience: 0,
      skills: [],
      achievements: []
    },
    settings: {
      tone: 'friendly',
      creativity: 75,
      verbosity: 'moderate',
      language_style: 'Áé∞‰ª£ÂÆûÁî®',
      ai_only_mode: false
    },
    api_config: {
      provider: 'openai',
      apiKey: '',
      model: 'gpt-3.5-turbo',
      temperature: 0.7,
      maxTokens: 2048,
      systemPrompt: '',
      host: ''
    }
  })
  const [autoFillState, setAutoFillState] = useState<{status:'idle'|'loading'|'success'|'error', message?: string}>({status:'idle'})
  const [showMineOnly, setShowMineOnly] = useState(false)
  const autoFillTimer = useRef<number | null>(null)

  // ÂàùÂßãÂåñ‰∏éÊåÅ‰πÖÂåñ‚ÄúÂè™ÁúãÊàëÁöÑ‚ÄùÁ≠õÈÄâÁä∂ÊÄÅÔºàÂøÖÈ°ªÂú®ÁªÑ‰ª∂ÂÜÖÈÉ®‰ΩøÁî® HookÔºâ
  useEffect(() => {
    try {
      const saved = localStorage.getItem('roles_filter_showMineOnly')
      if (saved !== null) {
        setShowMineOnly(saved === 'true')
      }
    } catch (e) {
      console.warn('ËØªÂèñÊú¨Âú∞Á≠õÈÄâÁä∂ÊÄÅÂ§±Ë¥•:', e)
    }
  }, [])

  useEffect(() => {
    try {
      localStorage.setItem('roles_filter_showMineOnly', String(showMineOnly))
    } catch (e) {
      console.warn('‰øùÂ≠òÊú¨Âú∞Á≠õÈÄâÁä∂ÊÄÅÂ§±Ë¥•:', e)
    }
  }, [showMineOnly])

  useEffect(() => {
    console.log('üöÄ ËßíËâ≤ÁÆ°ÁêÜÈ°µÈù¢ÂàùÂßãÂåñ - ÂºÄÂßã')
    console.log('ÂΩìÂâçÁéØÂ¢É:', {
      NODE_ENV: process.env.NODE_ENV,
      timestamp: new Date().toISOString()
    })
    loadRoles()
  }, [])

  // ÁõëÊéßËøûÊé•Áä∂ÊÄÅÂèòÂåñ
  useEffect(() => {
    console.log('üìä ËøûÊé•Áä∂ÊÄÅÊõ¥Êñ∞:', connStatus)
    console.log('üìä ËøûÊé•Áä∂ÊÄÅËØ¶ÊÉÖ:', Object.entries(connStatus).map(([id, status]) => ({
      ËßíËâ≤ID: id,
      Áä∂ÊÄÅ: status.status,
      Âª∂Ëøü: status.latency
    })))
  }, [connStatus])

  useEffect(() => {
    // ÁõëÂê¨ÁΩëÁªúÁä∂ÊÄÅÂèòÂåñ
    const cleanup = onNetworkChange((online) => {
      setNetworkStatus(online)
      if (online) {
        console.log('ÁΩëÁªúÂ∑≤ÊÅ¢Â§çÔºåÈáçÊñ∞Âä†ËΩΩÊï∞ÊçÆ')
        loadRoles()
      } else {
        console.warn('ÁΩëÁªúËøûÊé•Â∑≤Êñ≠ÂºÄ')
      }
    })

    return cleanup
  }, [])

  // Âçï‰∏™ËßíËâ≤ËøûÊé•Áä∂ÊÄÅÊ£ÄÊµãÂáΩÊï∞
  const testSingleRoleConnection = async (role: AIRole) => {
    const id = role.id || role.name
    console.log(`üîç ÂºÄÂßãÊ£ÄÊµãËßíËâ≤ËøûÊé•Áä∂ÊÄÅ: ${role.name} (ID: ${id})`)
    console.log(`üîç ËßíËâ≤APIÈÖçÁΩÆËØ¶ÊÉÖ:`, {
      provider: role.api_config?.provider,
      hasApiKey: !!role.api_config?.apiKey,
      apiKeyLength: role.api_config?.apiKey?.length,
      model: role.api_config?.model,
      host: role.api_config?.host
    })
    
    if (!role.api_config?.apiKey || !role.api_config?.provider) {
      console.log(`‚ö™ ËßíËâ≤ ${role.name} Ê≤°ÊúâAPIÈÖçÁΩÆÔºåËÆæÁΩÆ‰∏∫idleÁä∂ÊÄÅ`)
      setConnStatus(prev => {
        const newStatus = { ...prev, [id]: { status: 'idle' as const } }
        console.log(`‚ö™ Êõ¥Êñ∞Áä∂ÊÄÅ‰∏∫idle:`, newStatus)
        return newStatus
      })
      return
    }
    
    console.log(`üü° ËßíËâ≤ ${role.name} ÂºÄÂßãAPIËøûÊé•ÊµãËØï`)
    
    try {
      setConnStatus(prev => {
        const newStatus = { ...prev, [id]: { status: 'testing' as const } }
        console.log(`üü° Êõ¥Êñ∞Áä∂ÊÄÅ‰∏∫testing:`, newStatus)
        return newStatus
      })
      
      console.log(`üì° ÂèëÈÄÅAPIÊµãËØïËØ∑Ê±ÇÂà∞ /api/llm-test`)
      
      // ‰ΩøÁî®Â∏¶ÈáçËØïÊú∫Âà∂ÁöÑÁΩëÁªúËØ∑Ê±Ç
      const data = await fetchJsonWithRetry('/api/llm-test', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          provider: role.api_config.provider,
          apiKey: role.api_config.apiKey,
          host: role.api_config.host,
          model: role.api_config.model
        }),
        maxRetries: 2,
        timeout: 15000
      })
      
      console.log(`üì° ËßíËâ≤ ${role.name} APIÊµãËØïÂìçÂ∫î:`, data)
      
      if (data.ok) {
        console.log(`üü¢ ËßíËâ≤ ${role.name} ËøûÊé•ÊàêÂäüÔºåÂª∂Ëøü: ${data.latency_ms}ms`)
        setConnStatus(prev => {
          const newStatus = { ...prev, [id]: { status: 'success' as const, latency: data.latency_ms } }
          console.log(`üü¢ Êõ¥Êñ∞Áä∂ÊÄÅ‰∏∫success:`, newStatus)
          return newStatus
        })
      } else {
        console.log(`üî¥ ËßíËâ≤ ${role.name} ËøûÊé•Â§±Ë¥•:`, data.message)
        setConnStatus(prev => {
          const newStatus = { ...prev, [id]: { status: 'error' as const } }
          console.log(`üî¥ Êõ¥Êñ∞Áä∂ÊÄÅ‰∏∫error:`, newStatus)
          return newStatus
        })
      }
    } catch (error) {
      console.error(`üî¥ ËßíËâ≤ ${role.name} APIËøûÊé•ÊµãËØïÂºÇÂ∏∏:`, error)
      setConnStatus(prev => {
        const newStatus = { ...prev, [id]: { status: 'error' as const } }
        console.log(`üî¥ Êõ¥Êñ∞Áä∂ÊÄÅ‰∏∫error (ÂºÇÂ∏∏):`, newStatus)
        return newStatus
      })
    }
  }

  useEffect(() => {
    const run = async () => {
      console.log(`üöÄ ÂºÄÂßãÂπ∂Ë°åÊ£ÄÊµã ${roles.length} ‰∏™ËßíËâ≤ÁöÑËøûÊé•Áä∂ÊÄÅ`)
      console.log(`üöÄ ËßíËâ≤ÂàóË°®:`, roles.map(r => ({ 
        id: r.id, 
        name: r.name, 
        hasApiConfig: !!r.api_config,
        provider: r.api_config?.provider,
        hasApiKey: !!r.api_config?.apiKey
      })))
      
      if (roles.length === 0) {
        console.log(`‚ö†Ô∏è Ê≤°ÊúâËßíËâ≤ÈúÄË¶ÅÊ£ÄÊµãËøûÊé•Áä∂ÊÄÅ`)
        return
      }
      
      // Âπ∂Ë°åÊ£ÄÊµãÊâÄÊúâËßíËâ≤ÁöÑËøûÊé•Áä∂ÊÄÅÔºåÈÅøÂÖç‰∏≤Ë°åÊ£ÄÊµãÂØºËá¥ÁöÑÁä∂ÊÄÅ‰∫íÁõ∏ÂΩ±Âìç
      const promises = roles.map(role => testSingleRoleConnection(role))
      await Promise.allSettled(promises)
      console.log(`‚úÖ ÂÆåÊàêÊâÄÊúâËßíËâ≤ËøûÊé•Áä∂ÊÄÅÊ£ÄÊµã`)
    }

    if (roles.length > 0) {
      run()
    }
  }, [roles])

  const loadRoles = async () => {
    try {
      console.log('üì• ÂºÄÂßãÂä†ËΩΩËßíËâ≤Êï∞ÊçÆ')
      setLoading(true)
      const rolesData = await getAllAIRoles()
      console.log('üìã Âä†ËΩΩÂà∞ÁöÑËßíËâ≤Êï∞ÊçÆ:', rolesData.map(r => ({ 
        id: r.id,
        name: r.name, 
        hasApiKey: !!r.api_config?.apiKey,
        provider: r.api_config?.provider 
      })))
      setRoles(rolesData)
      console.log('üìã ËßíËâ≤Êï∞ÊçÆËÆæÁΩÆÂÆåÊàêÔºåËß¶ÂèëËøûÊé•Áä∂ÊÄÅÊ£ÄÊµã')
    } catch (error) {
      console.error('‚ùå Âä†ËΩΩËßíËâ≤Â§±Ë¥•:', error)
      const errorMessage = getNetworkErrorMessage(error)
      setSaveState({status: 'error', message: `Âä†ËΩΩËßíËâ≤Â§±Ë¥•: ${errorMessage}`})
    } finally {
      setLoading(false)
    }
  }

  const handleEdit = (role: AIRole) => {
    setEditingRole(role)
    
    // Á°Æ‰øù api_config ÁöÑÊâÄÊúâÂ≠óÊÆµÈÉΩÊúâÈªòËÆ§ÂÄº
    const defaultApiConfig = {
      provider: 'openai',
      apiKey: '',
      model: 'gpt-3.5-turbo',
      temperature: 0.7,
      maxTokens: 2048,
      systemPrompt: '',
      host: ''
    }
    
    const mergedApiConfig = {
      ...defaultApiConfig,
      ...role.api_config,
      // Á°Æ‰øùÊï∞ÂÄºÂ≠óÊÆµÊòØÊ≠£Á°ÆÁöÑÁ±ªÂûã
      temperature: typeof role.api_config?.temperature === 'number' 
        ? role.api_config.temperature 
        : (typeof role.api_config?.temperature === 'string' 
          ? parseFloat(role.api_config.temperature) 
          : 0.7),
      maxTokens: typeof role.api_config?.maxTokens === 'number' 
        ? role.api_config.maxTokens 
        : (typeof role.api_config?.maxTokens === 'string' 
          ? parseInt(role.api_config.maxTokens) 
          : 2048)
    }
    
    console.log('ÁºñËæëËßíËâ≤ - APIÈÖçÁΩÆÂêàÂπ∂:', {
      ÂéüÂßãÈÖçÁΩÆ: role.api_config,
      ÂêàÂπ∂ÂêéÈÖçÁΩÆ: mergedApiConfig
    })
    
    setFormData({
      ...role,
      specialties: [...role.specialties],
      api_config: mergedApiConfig
    })
    setShowCreateForm(true)
    setActiveTab('basic')
  }

  const handleCreate = () => {
    setEditingRole(null)
    setFormData({
      name: '',
      description: '',
      avatar_url: '',
      personality: '',
      specialties: [],
      learning_progress: {
        level: 1,
        experience: 0,
        skills: [],
        achievements: []
      },
      settings: {
        tone: 'friendly',
        creativity: 75,
        verbosity: 'moderate',
        language_style: 'Áé∞‰ª£ÂÆûÁî®'
      },
      api_config: {
        provider: 'openai',
        apiKey: '',
        model: 'gpt-3.5-turbo',
        temperature: 0.7,
        maxTokens: 2048,
        systemPrompt: '',
        host: ''
      }
    })
    setShowCreateForm(true)
    setActiveTab('basic')
  }

  const handleSave = async () => {
    try {
      console.log('=== ÂºÄÂßã‰øùÂ≠òËßíËâ≤ ===')
      console.log('ÂΩìÂâçformData:', JSON.stringify(formData, null, 2))
      console.log('ÁºñËæë‰∏≠ÁöÑËßíËâ≤ID:', editingRole?.id)
      
      // Ê£ÄÊü•ÁΩëÁªúÁä∂ÊÄÅ
      if (!isOnline()) {
        setSaveState({status: 'error', message: 'ÁΩëÁªúËøûÊé•Â∑≤Êñ≠ÂºÄÔºåËØ∑Ê£ÄÊü•ÁΩëÁªúËÆæÁΩÆ'})
        return
      }
      
      setSaveState({status: 'saving'})
      
      // È™åËØÅÂøÖË¶ÅÂ≠óÊÆµ
      if (!formData.name?.trim()) {
        console.error('ËßíËâ≤ÂêçÁß∞‰∏∫Á©∫')
        setSaveState({status: 'error', message: 'ËØ∑ËæìÂÖ•ËßíËâ≤ÂêçÁß∞'})
        return
      }

      if (!formData.description?.trim()) {
        console.error('ËßíËâ≤ÊèèËø∞‰∏∫Á©∫')
        setSaveState({status: 'error', message: 'ËØ∑ËæìÂÖ•ËßíËâ≤ÊèèËø∞'})
        return
      }

      // È™åËØÅAPIÈÖçÁΩÆ
      if (formData.api_config) {
        console.log('È™åËØÅAPIÈÖçÁΩÆ:', formData.api_config)
        
        if (!formData.api_config.provider) {
          console.error('APIÊèê‰æõÂïÜÊú™ÈÄâÊã©')
          setSaveState({status: 'error', message: 'ËØ∑ÈÄâÊã©APIÊèê‰æõÂïÜ'})
          return
        }

        if (!formData.api_config.apiKey?.trim()) {
          console.error('APIÂØÜÈí•‰∏∫Á©∫')
          setSaveState({status: 'error', message: 'ËØ∑ËæìÂÖ•APIÂØÜÈí•'})
          return
        }

        if (!formData.api_config.model?.trim()) {
          console.error('Ê®°ÂûãÊú™ÈÄâÊã©')
          setSaveState({status: 'error', message: 'ËØ∑ÈÄâÊã©Ê®°Âûã'})
          return
        }

        // È™åËØÅÊï∞ÂÄºÁ±ªÂûã - Ê∑ªÂä†Á±ªÂûãËΩ¨Êç¢ÂíåÊõ¥ËØ¶ÁªÜÁöÑË∞ÉËØï‰ø°ÊÅØ
        let temperature = formData.api_config.temperature
        
        // Â§ÑÁêÜ undefined Êàñ null ÁöÑÊÉÖÂÜµ
        if (temperature === undefined || temperature === null) {
          temperature = 0.7 // ÈªòËÆ§ÂÄº
          console.log('Ê∏©Â∫¶ÂÄº‰∏∫Á©∫Ôºå‰ΩøÁî®ÈªòËÆ§ÂÄº:', temperature)
        } else if (typeof temperature === 'string') {
          temperature = parseFloat(temperature)
          console.log('Ê∏©Â∫¶ÂÄº‰ªéÂ≠óÁ¨¶‰∏≤ËΩ¨Êç¢:', temperature)
        }
        
        console.log('Ê∏©Â∫¶ÂÄºÈ™åËØÅ:', {
          ÂéüÂßãÂÄº: formData.api_config.temperature,
          Á±ªÂûã: typeof formData.api_config.temperature,
          ËΩ¨Êç¢Âêé: temperature,
          ËΩ¨Êç¢ÂêéÁ±ªÂûã: typeof temperature
        })
        
        if (isNaN(temperature) || temperature < 0 || temperature > 2) {
          console.error('Ê∏©Â∫¶ÂÄºÊó†Êïà:', { temperature, ÂéüÂßãÂÄº: formData.api_config.temperature })
          setSaveState({status: 'error', message: 'Ê∏©Â∫¶ÂÄºÂøÖÈ°ªÂú®0-2‰πãÈó¥'})
          return
        }
        
        // Á°Æ‰øùÊ∏©Â∫¶ÂÄºÊòØÊï∞Â≠óÁ±ªÂûã
        formData.api_config.temperature = temperature

        let maxTokens = formData.api_config.maxTokens
        
        // Â§ÑÁêÜ undefined Êàñ null ÁöÑÊÉÖÂÜµ
        if (maxTokens === undefined || maxTokens === null) {
          maxTokens = 2048 // ÈªòËÆ§ÂÄº
          console.log('ÊúÄÂ§ßTokenÊï∞‰∏∫Á©∫Ôºå‰ΩøÁî®ÈªòËÆ§ÂÄº:', maxTokens)
        } else if (typeof maxTokens === 'string') {
          maxTokens = parseInt(maxTokens)
          console.log('ÊúÄÂ§ßTokenÊï∞‰ªéÂ≠óÁ¨¶‰∏≤ËΩ¨Êç¢:', maxTokens)
        }
          
        console.log('ÊúÄÂ§ßTokenÊï∞È™åËØÅ:', {
          ÂéüÂßãÂÄº: formData.api_config.maxTokens,
          Á±ªÂûã: typeof formData.api_config.maxTokens,
          ËΩ¨Êç¢Âêé: maxTokens,
          ËΩ¨Êç¢ÂêéÁ±ªÂûã: typeof maxTokens
        })
        
        if (isNaN(maxTokens) || maxTokens < 1 || maxTokens > 8192) {
          console.error('ÊúÄÂ§ßTokenÊï∞Êó†Êïà:', { maxTokens, ÂéüÂßãÂÄº: formData.api_config.maxTokens })
          setSaveState({status: 'error', message: 'ÊúÄÂ§ßTokenÊï∞ÂøÖÈ°ªÂú®1-8192‰πãÈó¥'})
          return
        }
        
        // Á°Æ‰øùÊúÄÂ§ßTokenÊï∞ÊòØÊï∞Â≠óÁ±ªÂûã
        formData.api_config.maxTokens = maxTokens
      }

      let result: boolean
      
      if (editingRole?.id) {
        console.log('Êõ¥Êñ∞Áé∞ÊúâËßíËâ≤ÔºàÈÄöËøáÊúçÂä°Á´ØAPIÔºâ')
        const resp = await fetch('/api/ai-roles/update', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ roleId: editingRole.id, roleData: formData })
        })
        const json = await resp.json()
        result = !!(resp.ok && json?.success)
      } else {
        console.log('ÂàõÂª∫Êñ∞ËßíËâ≤ÔºàÈÄöËøáÊúçÂä°Á´ØAPIÔºâ')
        const resp = await fetch('/api/ai-roles/create', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ roleData: formData, ownerUserId: user?.id || 'demo-user-id' })
        })
        const json = await resp.json()
        result = !!(resp.ok && json?.success)
      }

      if (result) {
        console.log('ËßíËâ≤‰øùÂ≠òÊàêÂäü')
        setSaveState({status: 'success', message: '‰øùÂ≠òÊàêÂäü'})
        
        // ÈáçÊñ∞Âä†ËΩΩËßíËâ≤ÂàóË°®ÔºàËøô‰ºöËá™Âä®Ëß¶ÂèëuseEffect‰∏≠ÁöÑËøûÊé•Áä∂ÊÄÅÊ£ÄÊµãÔºâ
        await loadRoles()
        
        // ÂÖ≥Èó≠ÁºñËæëË°®Âçï
        setEditingRole(null)
        setShowCreateForm(false)
        
        // 3ÁßíÂêéÈáçÁΩÆ‰øùÂ≠òÁä∂ÊÄÅ
        setTimeout(() => {
          setSaveState({status: 'idle'})
        }, 3000)
      } else {
        console.error('ËßíËâ≤‰øùÂ≠òÂ§±Ë¥•')
        setSaveState({status: 'error', message: '‰øùÂ≠òÂ§±Ë¥•ÔºåËØ∑ÈáçËØï'})
      }
    } catch (error: any) {
      console.error('=== handleSaveÂáΩÊï∞ÊâßË°åÂ§±Ë¥• ===')
      console.error('ÈîôËØØÂØπË±°:', error)
      console.error('ÈîôËØØÊ∂àÊÅØ:', error?.message)
      console.error('ÈîôËØØÂ†ÜÊ†à:', error?.stack)
      
      const errorMessage = getNetworkErrorMessage(error)
      setSaveState({status: 'error', message: errorMessage})
    }
  }

  const handleDelete = async (roleId: string) => {
    if (!confirm('Á°ÆÂÆöË¶ÅÂà†Èô§Ëøô‰∏™ËßíËâ≤ÂêóÔºüÊ≠§Êìç‰Ωú‰∏çÂèØÊÅ¢Â§ç„ÄÇ')) {
      return
    }

    try {
      await deleteAIRole(roleId)
      await loadRoles()
    } catch (error) {
      console.error('Âà†Èô§ËßíËâ≤Â§±Ë¥•:', error)
      alert('Âà†Èô§Â§±Ë¥•ÔºåËØ∑ÈáçËØï')
    }
  }

  const handleSpecialtyChange = (index: number, value: string) => {
    const newSpecialties = [...(formData.specialties || [])]
    newSpecialties[index] = value
    setFormData({ ...formData, specialties: newSpecialties })
  }

  const addSpecialty = () => {
    setFormData({
      ...formData,
      specialties: [...(formData.specialties || []), '']
    })
  }

  const removeSpecialty = (index: number) => {
    const newSpecialties = [...(formData.specialties || [])]
    newSpecialties.splice(index, 1)
    setFormData({ ...formData, specialties: newSpecialties })
  }

  const handleAvatarUpload = (file: File) => {
    // ÂàõÂª∫Êú¨Âú∞URLÁî®‰∫éÈ¢ÑËßà
    const url = URL.createObjectURL(file)
    setFormData({ ...formData, avatar_url: url })
    
    // ËøôÈáåÂèØ‰ª•Ê∑ªÂä†ÂÆûÈôÖÁöÑÊñá‰ª∂‰∏ä‰º†ÈÄªËæë
    console.log('‰∏ä‰º†Â§¥ÂÉèÊñá‰ª∂:', file)
  }

  const handleAutoFill = async (nameOverride?: string) => {
    try {
      const roleName = (nameOverride ?? formData.name ?? '').trim()
      if (!roleName) {
        setAutoFillState({ status: 'error', message: 'ËØ∑ÂÖàËæìÂÖ•ËßíËâ≤ÂêçÁß∞' })
        return
      }
      setAutoFillState({ status: 'loading' })

      const resp = await fetch('/api/ai-roles/auto-fill', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          name: roleName,
          // Ëá™Âä®Â°´ÂÖÖÁªü‰∏Ä‰ΩøÁî® dmxapiÔºåÈÅøÂÖçÂá∫Áé∞‚ÄúÊöÇ‰∏çÊîØÊåÅÊèê‰æõÂïÜ‚ÄùÁöÑÈîôËØØ
          provider: 'dmxapi',
          apiKey: formData.api_config?.apiKey,
          host: formData.api_config?.host,
          model: formData.api_config?.model
        })
      })
      const json = await resp.json()

      if (resp.ok && json?.success) {
        const data = json.data
        setFormData(prev => ({
          ...prev,
          description: data.description,
          personality: data.personality,
          specialties: data.specialties,
          settings: { ...(prev.settings || {}), ...data.settings },
          api_config: {
            ...(prev.api_config || {
              provider: 'openai',
              apiKey: '',
              model: 'gpt-3.5-turbo',
              temperature: 0.7,
              maxTokens: 2048,
              systemPrompt: '',
              host: ''
            }),
            systemPrompt: data.systemPrompt
          }
        }))
        setAutoFillState({ status: 'success', message: 'Â∑≤Ëá™Âä®ÁîüÊàêÂü∫Êú¨‰ø°ÊÅØÔºåÂèØÁªßÁª≠Ë∞ÉÊï¥Âêé‰øùÂ≠ò' })
      } else {
        setAutoFillState({ status: 'error', message: json?.message || 'ÁîüÊàêÂ§±Ë¥•' })
      }
    } catch (error) {
      console.error('AIËá™Âä®ÁîüÊàêÂ§±Ë¥•:', error)
      setAutoFillState({ status: 'error', message: 'ÁΩëÁªúÊàñÊúçÂä°ÈîôËØØ' })
    }
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-50 to-blue-50 flex items-center justify-center">
        <div className="text-lg text-gray-600">Âä†ËΩΩ‰∏≠...</div>
      </div>
    )
  }

  const filteredRoles = showMineOnly ? roles.filter(role => {
    const ownerId = (role.settings as any)?.owner_user_id
    if (ownerId && user?.id) return ownerId === user.id
    // ÊºîÁ§∫Ê®°Âºè‰∏ãÈªòËÆ§Êï∞ÊçÆÔºåÂêçÁß∞‰∏∫‚ÄúÊàëËá™Â∑±‚ÄùÁöÑËßíËâ≤ËßÜ‰∏∫ÂΩìÂâçÁî®Êà∑ÁöÑËßíËâ≤
    return role.name === 'ÊàëËá™Â∑±'
  }) : roles

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 to-blue-50">
      <div className="container mx-auto px-4 py-8">
        {/* ÁΩëÁªúÁä∂ÊÄÅÊèêÁ§∫ */}
        {!networkStatus && (
          <div className="mb-4 p-3 bg-red-100 border border-red-400 text-red-700 rounded">
            <div className="flex items-center">
              <span className="mr-2">‚ö†Ô∏è</span>
              ÁΩëÁªúËøûÊé•Â∑≤Êñ≠ÂºÄÔºåÈÉ®ÂàÜÂäüËÉΩÂèØËÉΩ‰∏çÂèØÁî®
            </div>
          </div>
        )}

        {/* ‰øùÂ≠òÁä∂ÊÄÅÊèêÁ§∫ */}
        {saveState.status !== 'idle' && (
          <div className={`mb-4 p-3 rounded border ${
            saveState.status === 'saving' ? 'bg-blue-100 border-blue-400 text-blue-700' :
            saveState.status === 'success' ? 'bg-green-100 border-green-400 text-green-700' :
            'bg-red-100 border-red-400 text-red-700'
          }`}>
            <div className="flex items-center">
              {saveState.status === 'saving' && <span className="mr-2">‚è≥</span>}
              {saveState.status === 'success' && <span className="mr-2">‚úÖ</span>}
              {saveState.status === 'error' && <span className="mr-2">‚ùå</span>}
              {saveState.message || (
                saveState.status === 'saving' ? 'Ê≠£Âú®‰øùÂ≠ò...' :
                saveState.status === 'success' ? '‰øùÂ≠òÊàêÂäü' :
                '‰øùÂ≠òÂ§±Ë¥•'
              )}
            </div>
          </div>
        )}

        {DEMO_MODE && (
          <div className="mb-4 p-3 bg-yellow-50 border border-yellow-300 text-yellow-800 rounded">
            ÂΩìÂâçÂ§Ñ‰∫é DEMO Ê®°ÂºèÊàñÊï∞ÊçÆÂ∫ì‰∏çÂèØÁî®ÔºåÂ∑≤ÂõûÈÄÄÂà∞ÂÜÖÁΩÆËßíËâ≤ÔºàDEFAULT_AI_ROLESÔºâ„ÄÇÈÉ®ÂàÜÊï∞ÊçÆÂèØËÉΩ‰∏ç‰ºöÊåÅ‰πÖÂåñÂà∞ Supabase„ÄÇ
          </div>
        )}

        {/* È°µÈù¢Ê†áÈ¢ò */}
        <div className="flex justify-between items-center mb-8">
          <div>
            <h1 className="text-3xl font-bold text-gray-900 mb-2">ËßíËâ≤ÁÆ°ÁêÜ</h1>
            <p className="text-gray-600">ÁÆ°ÁêÜÂíåÈÖçÁΩÆAIËßíËâ≤</p>
          </div>
          <button
            onClick={handleCreate}
            className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg flex items-center gap-2 transition-colors"
          >
            <Plus className="w-5 h-5" />
            ÂàõÂª∫Êñ∞ËßíËâ≤
          </button>
        </div>

        <div className="flex items-center justify-end mb-4">
          <label className="inline-flex items-center gap-2 text-sm text-gray-700">
            <input
              type="checkbox"
              checked={showMineOnly}
              onChange={(e) => setShowMineOnly(e.target.checked)}
            />
            Âè™ÁúãÊàëÁöÑËßíËâ≤
          </label>
        </div>

        {/* ËßíËâ≤ÂàóË°® */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {filteredRoles.map((role, index) => (
            <div key={role.id || `idx-${index}`} className="bg-white rounded-xl shadow-lg p-6 hover:shadow-xl transition-shadow">
              {/* ËßíËâ≤Â§¥ÂÉèÂíåÂü∫Êú¨‰ø°ÊÅØ */}
              <div className="flex items-center gap-4 mb-4">
                <div className="w-16 h-16 rounded-full overflow-hidden bg-gray-100">
                  <Image
                    src={role.avatar_url}
                    alt={role.name}
                    width={64}
                    height={64}
                    className="w-full h-full object-cover"
                  />
                </div>
                <div className="flex-1">
                  <h3 className="text-xl font-semibold text-gray-900 flex items-center gap-2">
                    {role.name}
                    {(user?.id && (role.settings as any)?.owner_user_id === user.id) && (
                      <span className="text-xs bg-purple-100 text-purple-700 px-2 py-0.5 rounded">ÊàëÁöÑ</span>
                    )}
                    {(() => {
                      const status = connStatus[role.id || role.name]?.status
                      const latency = connStatus[role.id || role.name]?.latency
                      
                      console.log(`üéØ Ê∏≤ÊüìËßíËâ≤ ${role.name} Áä∂ÊÄÅÁÅØ:`, { 
                        roleId: role.id || role.name, 
                        status, 
                        latency,
                        connStatusKeys: Object.keys(connStatus)
                      })
                      
                      let statusClass = 'bg-gray-300' // ÈªòËÆ§ÁÅ∞Ëâ≤
                      let title = 'Êú™Áü•Áä∂ÊÄÅ'
                      
                      switch (status) {
                        case 'success':
                          statusClass = 'bg-green-500'
                          title = `ËøûÊé•ÊàêÂäü${latency ? ` (${latency}ms)` : ''}`
                          break
                        case 'testing':
                          statusClass = 'bg-yellow-400 animate-pulse'
                          title = 'Ê£ÄÊµã‰∏≠...'
                          break
                        case 'error':
                          statusClass = 'bg-red-500'
                          title = 'ËøûÊé•Â§±Ë¥•'
                          break
                        case 'idle':
                          statusClass = 'bg-gray-400'
                          title = 'Êú™ÈÖçÁΩÆAPI'
                          break
                        default:
                          statusClass = 'bg-gray-300'
                          title = 'Êú™Áü•Áä∂ÊÄÅ'
                      }
                      
                      return (
                        <span 
                          className={`inline-block w-2.5 h-2.5 rounded-full ${statusClass}`}
                          title={title}
                        />
                      )
                    })()}
                  </h3>
                  <p className="text-gray-600 text-sm">{role.description}</p>
                </div>
              </div>

              {/* ËßíËâ≤Â±ûÊÄß */}
              <div className="space-y-2 mb-4">
                <div>
                  <span className="text-sm font-medium text-gray-700">‰∏™ÊÄßÔºö</span>
                  <span className="text-sm text-gray-600">{role.personality}</span>
                </div>
                <div>
                  <span className="text-sm font-medium text-gray-700">‰∏ìÈïøÔºö</span>
                  <div className="flex flex-wrap gap-1 mt-1">
                    {role.specialties.slice(0, 3).map((specialty, index) => (
                      <span
                        key={`${role.id}-specialty-${index}-${specialty}`}
                        className="bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded"
                      >
                        {specialty}
                      </span>
                    ))}
                    {role.specialties.length > 3 && (
                      <span key={`${role.id}-more-specialties`} className="text-xs text-gray-500">+{role.specialties.length - 3}</span>
                    )}
                  </div>
                </div>
                <div>
                  <span className="text-sm font-medium text-gray-700">Á≠âÁ∫ßÔºö</span>
                  <span className="text-sm text-gray-600">Lv.{role.learning_progress.level}</span>
                </div>
              </div>

              {/* Êìç‰ΩúÊåâÈíÆ */}
              <div className="flex gap-2">
                <button
                  onClick={() => handleEdit(role)}
                  className="flex-1 bg-blue-50 hover:bg-blue-100 text-blue-600 px-3 py-2 rounded-lg flex items-center justify-center gap-2 transition-colors"
                >
                  <Edit className="w-4 h-4" />
                  ÁºñËæë
                </button>
                <button
                  onClick={() => handleDelete(role.id!)}
                  className="flex-1 bg-red-50 hover:bg-red-100 text-red-600 px-3 py-2 rounded-lg flex items-center justify-center gap-2 transition-colors"
                >
                  <Trash2 className="w-4 h-4" />
                  Âà†Èô§
                </button>
              </div>
            </div>
          ))}
        </div>

        {/* ÂàõÂª∫/ÁºñËæëË°®ÂçïÊ®°ÊÄÅÊ°Ü */}
        {showCreateForm && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
            <div className="bg-white rounded-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto">
              <div className="p-6">
                <div className="flex justify-between items-center mb-6">
                  <h2 className="text-2xl font-bold text-gray-900">
                    {editingRole ? 'ÁºñËæëËßíËâ≤' : 'ÂàõÂª∫Êñ∞ËßíËâ≤'}
                  </h2>
                  <button
                    onClick={() => setShowCreateForm(false)}
                    className="text-gray-400 hover:text-gray-600"
                  >
                    <X className="w-6 h-6" />
                  </button>
                </div>

                {/* Ê†áÁ≠æÈ°µÂØºËà™ */}
                <div className="flex border-b border-gray-200 mb-6">
                  {TABS.map((tab) => (
                    <button
                      key={tab.key}
                      onClick={() => setActiveTab(tab.key as 'basic' | 'avatar' | 'api')}
                      className={`px-4 py-2 font-medium text-sm border-b-2 transition-colors ${
                        activeTab === tab.key
                          ? 'border-blue-500 text-blue-600'
                          : 'border-transparent text-gray-500 hover:text-gray-700'
                      }`}
                    >
                      {tab.label}
                    </button>
                  ))}
                </div>

                {/* Ê†áÁ≠æÈ°µÂÜÖÂÆπ */}
                {activeTab === 'basic' && (
                  <div className="space-y-6">
                    {/* Âü∫Êú¨‰ø°ÊÅØ */}
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          ËßíËâ≤ÂêçÁß∞ *
                        </label>
                        <input
                          type="text"
                          value={formData.name || ''}
                          onChange={(e) => {
                            const newName = e.target.value
                            setFormData({ ...formData, name: newName })
                            if (formData.settings?.ai_only_mode) {
                              if (autoFillTimer.current) {
                                clearTimeout(autoFillTimer.current)
                              }
                              autoFillTimer.current = window.setTimeout(() => {
                                handleAutoFill(newName)
                              }, 500)
                            }
                          }}
                          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                          placeholder="ËæìÂÖ•ËßíËâ≤ÂêçÁß∞"
                        />
                        <div className="mt-2 flex items-center gap-2">
                          <button
                            onClick={() => handleAutoFill()}
                            className="text-blue-600 hover:text-blue-700 text-sm"
                            type="button"
                          >
                            AIÊô∫ËÉΩÁîüÊàêÂü∫Êú¨‰ø°ÊÅØ
                          </button>
                          {autoFillState.status === 'loading' && (
                            <span className="text-gray-500 text-sm">ÁîüÊàê‰∏≠...</span>
                          )}
                          {autoFillState.status === 'success' && (
                            <span className="text-green-600 text-sm">ÁîüÊàêÂÆåÊàê ‚úÖ</span>
                          )}
                          {autoFillState.status === 'error' && (
                            <span className="text-red-600 text-sm">{autoFillState.message || 'ÁîüÊàêÂ§±Ë¥•'}</span>
                          )}
                        </div>
                        <div className="mt-2">
                          <label className="inline-flex items-center gap-2 text-sm text-gray-700">
                            <input
                              type="checkbox"
                              checked={!!formData.settings?.ai_only_mode}
                              onChange={(e) => setFormData({
                                ...formData,
                                settings: { ...formData.settings!, ai_only_mode: e.target.checked }
                              })}
                            />
                            AI-only Ê®°ÂºèÔºöÊ†πÊçÆÂêçÁß∞Ëá™Âä®ÁîüÊàêÂü∫Êú¨‰ø°ÊÅØ
                          </label>
                        </div>
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          Â§¥ÂÉèURL
                        </label>
                        <input
                          type="text"
                          value={formData.avatar_url || ''}
                          onChange={(e) => setFormData({ ...formData, avatar_url: e.target.value })}
                          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                          placeholder="/avatars/example.svg"
                        />
                      </div>
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        ËßíËâ≤ÊèèËø∞ *
                      </label>
                      <textarea
                        value={formData.description || ''}
                        onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                        rows={3}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        placeholder="ÊèèËø∞ËßíËâ≤ÁöÑÁâπÁÇπÂíåËÉåÊôØ"
                      />
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        ‰∏™ÊÄßÁâπÁÇπ
                      </label>
                      <input
                        type="text"
                        value={formData.personality || ''}
                        onChange={(e) => setFormData({ ...formData, personality: e.target.value })}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        placeholder="ÊèèËø∞ËßíËâ≤ÁöÑÊÄßÊ†ºÁâπÁÇπ"
                      />
                    </div>

                    {/* ‰∏ìÈïøÊäÄËÉΩ */}
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        ‰∏ìÈïøÊäÄËÉΩ
                      </label>
                      <div className="space-y-2">
                        {(formData.specialties || []).map((specialty, index) => (
                          <div key={`specialty-${index}-${specialty}`} className="flex gap-2">
                            <input
                              type="text"
                              value={specialty}
                              onChange={(e) => handleSpecialtyChange(index, e.target.value)}
                              className="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                              placeholder="ËæìÂÖ•‰∏ìÈïøÊäÄËÉΩ"
                            />
                            <button
                              onClick={() => removeSpecialty(index)}
                              className="text-red-500 hover:text-red-700 px-2"
                            >
                              <X className="w-4 h-4" />
                            </button>
                          </div>
                        ))}
                        <button
                          onClick={addSpecialty}
                          className="text-blue-600 hover:text-blue-700 text-sm flex items-center gap-1"
                        >
                          <Plus className="w-4 h-4" />
                          Ê∑ªÂä†‰∏ìÈïø
                        </button>
                      </div>
                    </div>

                    {/* ËÆæÁΩÆÈÄâÈ°π */}
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          ËØ≠Ë∞ÉÈ£éÊ†º
                        </label>
                        <select
                          value={formData.settings?.tone || 'friendly'}
                          onChange={(e) => setFormData({
                            ...formData,
                            settings: { ...formData.settings!, tone: e.target.value }
                          })}
                          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        >
                          <option value="friendly">ÂèãÂ•Ω</option>
                          <option value="formal">Ê≠£Âºè</option>
                          <option value="casual">ÈöèÊÑè</option>
                          <option value="humorous">ÂπΩÈªò</option>
                          <option value="wise">Êô∫ÊÖß</option>
                          <option value="poetic">ËØóÊÑè</option>
                        </select>
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          ÂàõÈÄ†Âäõ ({formData.settings?.creativity || 75})
                        </label>
                        <input
                          type="range"
                          min="0"
                          max="100"
                          value={formData.settings?.creativity || 75}
                          onChange={(e) => setFormData({
                            ...formData,
                            settings: { ...formData.settings!, creativity: parseInt(e.target.value) }
                          })}
                          className="w-full"
                        />
                      </div>
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          ËØ¶ÁªÜÁ®ãÂ∫¶
                        </label>
                        <select
                          value={formData.settings?.verbosity || 'moderate'}
                          onChange={(e) => setFormData({
                            ...formData,
                            settings: { ...formData.settings!, verbosity: e.target.value }
                          })}
                          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        >
                          <option value="concise">ÁÆÄÊ¥Å</option>
                          <option value="moderate">ÈÄÇ‰∏≠</option>
                          <option value="detailed">ËØ¶ÁªÜ</option>
                        </select>
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          ËØ≠Ë®ÄÈ£éÊ†º
                        </label>
                        <input
                          type="text"
                          value={formData.settings?.language_style || ''}
                          onChange={(e) => setFormData({
                            ...formData,
                            settings: { ...formData.settings!, language_style: e.target.value }
                          })}
                          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                          placeholder="‰æãÂ¶ÇÔºöÁé∞‰ª£ÂÆûÁî®„ÄÅÂè§ÂÖ∏‰ºòÈõÖ"
                        />
                      </div>
                    </div>
                  </div>
                )}

                {activeTab === 'avatar' && (
                  <div className="space-y-6">
                    <AvatarUpload
                      currentAvatar={formData.avatar_url}
                      onAvatarChange={(file, previewUrl) => setFormData({ ...formData, avatar_url: previewUrl })}
                    />
                  </div>
                )}

                {activeTab === 'api' && (
                  <div className="space-y-6">
                    <ApiConfig
                      settings={formData.api_config || {
                        provider: 'openai',
                        apiKey: '',
                        model: 'gpt-3.5-turbo',
                        temperature: 0.7,
                        maxTokens: 2048,
                        systemPrompt: '',
                        host: ''
                      }}
                      onChange={(config) => setFormData({ ...formData, api_config: config })}
                    />
                  </div>
                )}

                {/* Áä∂ÊÄÅÊ∂àÊÅØ */}
                {saveState.status !== 'idle' && (
                  <div className={`mt-6 p-3 rounded-lg ${
                    saveState.status === 'success' ? 'bg-green-50 text-green-700 border border-green-200' :
                    saveState.status === 'error' ? 'bg-red-50 text-red-700 border border-red-200' :
                    'bg-blue-50 text-blue-700 border border-blue-200'
                  }`}>
                    {saveState.message || (saveState.status === 'saving' ? 'Ê≠£Âú®‰øùÂ≠ò...' : '')}
                  </div>
                )}

                {/* Êìç‰ΩúÊåâÈíÆ */}
                <div className="flex gap-3 mt-8">
                  <button
                    onClick={() => {
                      setShowCreateForm(false)
                      setSaveState({ status: 'idle' })
                    }}
                    disabled={saveState.status === 'saving'}
                    className="flex-1 bg-gray-100 hover:bg-gray-200 text-gray-700 px-4 py-2 rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    ÂèñÊ∂à
                  </button>
                  <button
                    onClick={handleSave}
                    disabled={saveState.status === 'saving'}
                    className="flex-1 bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg flex items-center justify-center gap-2 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    {saveState.status === 'saving' ? (
                      <>
                        <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                        ‰øùÂ≠ò‰∏≠...
                      </>
                    ) : (
                      <>
                        <Save className="w-4 h-4" />
                        ‰øùÂ≠ò
                      </>
                    )}
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}